<?xml version="1.0" encoding="UTF-8"?>

<!--  
   Copyright 2008 University of Rochester

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!--
     This is the build file for ir_web
-->
<project name="ir_web" xmlns:ivy="antlib:org.apache.ivy.ant" basedir=".">
	 	


	<!-- always disable emma -->
	<property name="emma.enabled" value="false" />
	
    <!-- Use the build.properties file for user specific settings -->
    <property file="build.properties"/>

    <!-- project name -->
    <property name="project.name" value="ir_web"/> 

    <!-- location of the base build file -->
    <property name="base.build.file" value="../base.xml"/>
	
	<!-- top level folder for ir plus properties files -->
	<property name="ir.plus.properties" value="../properties"/> 
	
	<!-- folder that contains the properties for running the system locally -->
	<property name="ir.plus.properties.local" value="${ir.plus.properties}/local"/>
	
	<!-- folder that contains the properties for running the system in production -->
	<property name="ir.plus.properties.production" value="${ir.plus.properties}/production"/>
	
	<!-- project specific configuration files for spring -->
	<property name="spring.project.config" value="${basedir}/spring-config/local"/> 

	<!-- The web app directory -->
	<property name="webapps.dir" value="${basedir}/webapps"/>
	
	<!-- The specified webapp being worked on-->
	<property name="webapp.dir" value="${webapps.dir}/${project.name}"/>

	<!-- The webinf directory for local running -->
	<property name="webapp.webinf.dir" value="${webapp.dir}/WEB-INF"/>
	 
	<!-- Web library Directory -->
	<property name="webapp.lib.dir" value="${webapp.webinf.dir}/lib"/>

	<!-- Web classes directory -->
	<property name="webapp.classes.dir" value="${webapp.webinf.dir}/classes"/>

	<!-- Web Inf conf  -->
	<property name="webapp.conf.dir" value="${basedir}/web-conf"/>
	
	<!-- quartz configuration files  -->
	<property name="quartz.dir" value="${basedir}/quartz"/>
	
	<!-- struts configuration files -->
	<property name="struts.config.dir.common" value="${basedir}/struts-config/common"/>
	<property name="struts.config.dir.test" value="${basedir}/struts-config/test"/>
	<property name="struts.config.dir.production" value="${basedir}/struts-config/production"/>

	
	<!-- Tomcat library directory -->
	<property name="tomcat.lib.dir" value="${librarydir}/tomcat/tomcat-6.0.14"/>
	
	<!-- location for production staging -->
	<property name="production.staging.dir" value="${basedir}/production-staging"/>
	
	<!-- location for production staging -->
	<property name="production.web.xml" value="${webapp.conf.dir}/web-ssl.xml"/>

	<!-- import the base set of files -->
    <import file="${base.build.file}"/>
	
	

    <!-- Allow users to see their properties and how they are set -->
    <target name="echo-properties" 
        description="Ouput the project properties for users when needed" >
	    <echo message="build.dir = ${build.dir}"/>
	    <echo message="src.dir = ${src.dir}"/>
	    <echo message="dist.dir = ${dist.dir}"/>
	    <echo message="test.dir = ${test.dir}"/>
	    <echo message="lib.dir = ${lib.dir}"/>
	    <echo message="project.name = ${project.name}"/>
	    <echo message="project.version = ${project.version}"/>
	    <echo message="dist.dir = ${dist.dir}"/>
	    <echo message="report.dir = ${report.dir}"/>
    	<echo message="do custom build = ${build.custom}"/>
    	
    	<echo message="${spring.config.data.source.test}"/>
    	<echo message="${spring.config.common.config}"/>
    	<echo message="${spring.project.config}"/>
    </target>


    <!-- Set the location where the libraries this project is dependent -->
    <path id="libraries">
	  <fileset dir="${lib.dir}" includes="*.jar" excludes="emma*"/>
      <fileset dir="../marc4j/2.4" includes="*.jar"/>	
    </path>

    <!-- Copy non java resources -->
	<target name="copy-resources" description="-->Copy the non java resources into the build directory">
		<copy todir="${build.dir}/classes">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
			
			<!-- logger configuration-->
			<fileset dir="${log4j.production.appender}"/>
			
			<!-- quartz configuration files -->
			<fileset dir="${quartz.dir}"/>
		</copy>

	</target>

	<!-- compile the java source files -->
    <target name="build" depends="clean, retrieve, copy-resources" xmlns:ext="http://edu.ur/d1/ext">
        <mkdir dir="${build.dir}/classes"/>
        <ext:javac srcdir="${src.dir}"
			 destdir="${build.dir}/classes"
			 classpathref="libraries"/>
    </target>

	<!-- clean up the build directories -->
    <target name="clean" description="-->Clean the project">
        <delete dir="${build.dir}"/>
        <delete dir="${report.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
	
	<!-- clean up the build directories plus lib directory -->
    <target name="full-clean" depends="clean, clean-run-webapp-local,clean-production-staging" description="-->Clean the project and lib directory">
        <delete dir="${lib.dir}"/>
    	<delete dir="${ivy.dir}"/>
    	<delete dir="${webapp.dir}/page-resources/yui"/>
    </target>	

    <!-- build the test class files of the project -->
    <target name="test-build" depends="build" description="-->Compile the test classes"
    xmlns:ext="http://edu.ur/d1/ext">
        <ext:javac srcdir="${test.dir}"
			 destdir="${build.dir}/classes"
			 classpathref="libraries"/>
    </target>


	<!-- no tests for web layer -->
	<target name="test" depends="test-build" description="-->Run the tests">
		<echo message="running tests" />
		 <!-- run the tests -->
	</target>

    <!-- generate the documentation -->
    <target name="docs" description="-->build the javadocs">
        <mkdir dir="${dist.dir}/docs"/>
		<javadoc
	           destdir="${dist.dir}/docs/api"
	           author="true"
	           version="true"
	           use="true"
	           windowtitle="University of Rochester Libraries Institutional Repository Web API">

			<fileset dir="${src.dir}" defaultexcludes="yes">
				<include name="edu/ur/**"/>
			</fileset>

			<doctitle><![CDATA[<h1>University of Rochester Libraries Institutional Repository Web API</h1>]]></doctitle>
		    <bottom>
			<![CDATA[<i>Copyright &#169; 2006 University of Rochester Libraries</i>]]></bottom>
	       <tag name="todo" scope="all" description="To do:"/>
	       <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
        </javadoc>
    </target>

    <!-- generate a distribution jar file -->
    <target name="dist" depends="test" description="-->generate a distribution jar file">
        <mkdir dir="${dist.dir}"/>
		<!-- Put everything in ${build} into the {project.name}-version.jar file -->
		<jar jarfile="${dist.dir}/${project.name}-${project.version}.jar"
			basedir="${build.dir}/classes"
			excludes="**/*Test.class,
						**/*testng*, 
						testing_unix.properties, 
						testing_windows.properties,
						log4j.xml"/>
    </target>
	
	<!-- exlude libs that deal with source file checking, testing
	     code coverage -->
	<fileset id="web.libs" dir="${lib.dir}">
		<exclude name="checkstyle*"/>
		<exclude name="emma*"/>
		<exclude name="google-collect*"/>
		<exclude name="testng*"/>
		<exclude name="yui*"/>
		<exclude name="servlet-api*"/>
		<exclude name="jsp-api*"/>
		<exclude name="el-api*"/>
    </fileset>
	
    <!-- Copy needed files to the web-inf directory
	     This is so the webapp can point directly 
	     to your jsp files and you can modify them
	     and view the result by refresing the browser.
	     You must first tell your web-browser to look
	     at your webapps directory 
	-->
   <target name="prep-run-webapp-local" depends="build, clean-run-webapp-local, move-yui">
        <!-- Remove the old classes -->
        <delete dir="${webapp.classes.dir}" />

        <!-- Remove the old libraries -->
        <delete dir="${webapp.lib.dir}"/>
   	
   	    <!-- Remove the old configuration files-->
   	     <delete dir="${webapp.webinf.dir}"/>

   	    <!-- rebuild the folders -->
        <mkdir dir="${webapp.classes.dir}"/>
        <mkdir dir="${webapp.lib.dir}"/>
   	    <mkdir dir="${webapp.webinf.dir}"/>

        <!-- Copy the classes directory into the web classes dir 
             also copy the struts configuration files into the classes
         -->
        <copy todir="${webapp.classes.dir}">
           <fileset dir="${build.dir}/classes"/>
           <fileset dir="${struts.config.dir.common}"/>
           <fileset dir="${struts.config.dir.test}"/>
        </copy>
   	
   	    <copy todir="${webapp.classes.dir}" overwrite="true">
   	           <fileset dir="${log4j.debug.file.appender}"/>
   	    </copy>

        <copy todir="${webapp.lib.dir}">
	        <fileset refid="web.libs"/>
        	<fileset dir="../marc4j/2.4" includes="*.jar"/>
        </copy>

   	    <!-- create the web inf directory -->
        <copy todir="${webapp.webinf.dir}" overwrite="true">
        	<fileset dir="${ir.plus.properties.local}"/>
        	<fileset dir="${spring.config.common.config}"/>
        	<fileset dir="${spring.project.config}"/>
        	<fileset dir="${webapp.conf.dir}/WEB-INF"/>
        </copy>

        <copy todir="${webapp.webinf.dir}" 
			file="${webapp.conf.dir}/web.xml"/>
     </target>
	
	<!-- unzip the YUI files  -->
	<target name="prep-yui"  if="yui.unzip" description="--> unzips the yui libraries">
		<mkdir dir="${basedir}/yui-unzip"/>
		<unzip dest="${basedir}/yui-unzip" src="${lib.dir}/yui-2.7.0.zip"/>
	</target>
	
	<!-- copy the YUI files  -->
	<target name="move-yui" depends="prep-yui">
		<copy todir="${webapp.dir}/page-resources/yui">
		    <fileset dir="${basedir}/yui-unzip/yui/build/"/>
	    </copy>
	</target>
	
	<!-- delete the webapp local files -->
	<target name="clean-run-webapp-local">
		 <delete dir="${webapp.webinf.dir}"/>
	</target>
	

	
	<!-- publish the local war file -->
	<target name="test-run-local" depends="prep-run-webapp-local" description="-->build a local test environment file">
		
		<war destfile="local-${project.name}.war" webxml="${webapp.conf.dir}/web.xml">
		    <webinf dir="${webapp.conf.dir}/WEB-INF"/>
			<fileset dir="${webapp.dir}">
			    <exclude name="WEB-INF/**"/>
			</fileset>
			
			<classes dir="${webapp.classes.dir}"/>
			<lib dir="${webapp.lib.dir}"/>
				      
		 </war>
	</target>
	
	
	<!-- copy the custom code in-->
	<target name="do-custom-build" if="build.custom" depends="prepare-production-staging">
		<!-- copy over the customizations  -->
	    <copy todir="${production.staging.dir}/webapp/" overwrite="true">
			<fileset dir="${custom.build.dir}/ir_web/webapps"/>
		</copy>
		<copy todir="${production.staging.dir}/web-inf/" overwrite="true">
		    <fileset dir="${custom.build.dir}/ir_web/spring-config/local"/>
		</copy>
		<copy todir="${production.staging.dir}/lib/" overwrite="true" 
			file="${custom.build.dir}/ir_service/ir_service_custom/ir_service_custom-2.2.jar"/>
		
		<copy todir="${production.staging.dir}/web-inf/" overwrite="true" 
		    file="${custom.build.dir}/properties/production/ir_plus.properties"/>
		
		<copy todir="${production.staging.dir}/classes" overwrite="true"
			file="${custom.build.dir}/log4j-config/log4j2.xml"/>
		
	</target>
	
	
	<!-- copy the custom testing code over any specific custom production changes -->
	<target name="do-testing-custom-build" if="build.custom" depends="do-custom-build">
		<copy todir="${production.staging.dir}/webapp/" overwrite="true">
				<fileset dir="${custom.build.dir}/ir_web_testing/webapps"/>
		</copy>
	</target>
	
	<!-- create the production build -->
	<target name="prepare-production-staging" depends="clean-production-staging, build, move-yui">
		
		<!-- re-create production stag -->
		<mkdir dir="${production.staging.dir}"/>
		
		<!-- make the classes dir-->
		<mkdir dir="${production.staging.dir}/classes"/>
		
		<!-- production web-inf directory -->
		<mkdir dir="${production.staging.dir}/web-inf"/>
		
		<!-- production lib directory -->
        <mkdir dir="${production.staging.dir}/lib"/>
		
		<!-- jsp files and resources -->
		<mkdir dir="${production.staging.dir}/webapp/ir_web"/>

		<!--copy the necessary library directories -->
        <copy todir="${production.staging.dir}/lib">
	        <fileset refid="web.libs"/>
        	<fileset dir="../marc4j/2.4" includes="*.jar"/>
        </copy>
	
		<!--copy the necessary jsp files and resources -->
		<copy todir="${production.staging.dir}/webapp/ir_web/">
			<fileset dir="${webapp.dir}">
			    <exclude name="WEB-INF/**"/>
			</fileset>
		</copy>
		
		
		
		<!-- copy the configuration files into the directory  -->
	    <copy todir="${production.staging.dir}/classes">
	           <fileset dir="${build.dir}/classes"/>
	    	   <fileset dir="${struts.config.dir.common}"/>
	    	   <fileset dir="${struts.config.dir.production}"/>
	    </copy>
       
        <!-- overwrite the logging file to be the production appender -->
		<copy todir="${production.staging.dir}/classes" overwrite="true">
	    	   <fileset dir="${log4j.production.appender}"/>
	   	</copy>

   	    <!-- create the web inf directory -->
        <copy todir="${production.staging.dir}/web-inf" overwrite="true">
        	<fileset dir="${ir.plus.properties.production}"/>
        	<fileset dir="${spring.config.common.config}"/>
        	<fileset dir="${spring.project.config}"/>
        	<fileset dir="${webapp.conf.dir}/WEB-INF"/>
        </copy>	
	</target>

	
	<!-- publish the distribution jar file to the local repository -->
	<!-- this sets production settings.  -->
	<!--     Make sure the production configuration files have been set properly -->
	<target name="publish-local" depends="do-custom-build" description="-->build production war file">		
		<war destfile="../ir_plus.war" webxml="${production.web.xml}">
		    <webinf dir="${production.staging.dir}/web-inf"/>
			<fileset dir="${production.staging.dir}/webapp/${project.name}"/>			   
			<classes dir="${production.staging.dir}/classes"/>
			<lib dir="${production.staging.dir}/lib"/>				      
		</war>		
	</target>
	
	<!-- publish the distribution jar file to the local repository -->
	<!-- this sets production settings.  -->
	<!--     Make sure the production configuration files have been set properly -->
	<target name="publish-local-testing" depends="do-testing-custom-build" description="-->build pre-production war file">		
		<war destfile="../ir_plus_testing.war" webxml="${production.web.xml}">
		    <webinf dir="${production.staging.dir}/web-inf"/>
			<fileset dir="${production.staging.dir}/webapp/${project.name}"/>			   
			<classes dir="${production.staging.dir}/classes"/>
			<lib dir="${production.staging.dir}/lib"/>				      
		</war>		
	</target>
	
	<target name="build-custom-dir" description="--> Builds the directory structure for custom code">
		<mkdir dir="${custom.build.dir}"/>
		<mkdir dir="${custom.build.dir}/ir_web/webapps/ir_web/page-resources/images/all-images"/>
		<mkdir dir="${custom.build.dir}/ir_web/webapps/ir_web/page-resources/css"/>
	</target>
	
	<!-- delete the webapp production staging files -->
	<target name="clean-production-staging">
		 <delete dir="${production.staging.dir}"/>
	</target>
	

</project>
