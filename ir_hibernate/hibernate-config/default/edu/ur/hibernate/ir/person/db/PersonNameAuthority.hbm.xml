<?xml version="1.0"?>

<!--  
   Copyright 2008 University of Rochester

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->   


<!DOCTYPE hibernate-mapping SYSTEM
			"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
<!--
	Mapping for a Person
	
	@author Nathan Sarr
-->
<hibernate-mapping package="edu.ur.ir.person">
	<class name="PersonNameAuthority" table="person.person_name_authority"
		lazy="true">
		
		<!-- Common id property. -->
		<id name="id" type="long" column="person_name_authority_id"
			unsaved-value="0" access="field">
			<generator class="sequence">
				<param name="sequence">person.person_name_authority_seq</param>
			</generator>
		</id>

		<!-- A versioned entity. -->
		<version name="version" column="version"
			access="org.hibernate.property.DirectPropertyAccessor" />

		<!-- Birth date for this person -->
		<many-to-one class="BirthDate" 
			name="birthDate" 
			column="birth_date_id"
			cascade="all"
			insert="true"
			update="true" 
			unique="true"/>
			
		<!-- Death date for this person -->
		<many-to-one class="DeathDate" 
			name="deathDate" 
			column="death_date_id"
			cascade="all"
			insert="true"
			update="true" 
			unique="true"/>		
			
	    <!-- Names for this person -->
		<set name="names" 
		     access="field"
		     inverse="true" 
		     optimistic-lock="false"
		     cascade="all-delete-orphan"
			 lazy="true"
			 fetch="subselect">
			<key column="person_name_authority_id" not-null="true" />
			<one-to-many class="PersonName"/>
		</set>
		
		<!--  identifiers for this Item -->	
		<set name="identifiers" 
		    schema="person" 
		    inverse="true" 
		    cascade="all-delete-orphan" 
		    access="field" 
		    fetch="subselect"
		    lazy="true">
			<key column="person_name_authority_id" not-null="true"/>
			<one-to-many class="PersonNameAuthorityIdentifier"/>
		</set>
		
		<!-- Authoritative name for this person -->
		<many-to-one class="PersonName" 
			name="authoritativeName" 
			column="authoritative_name_id"
			cascade="all"
			insert="true"
			update="true" 
			unique="true"/>

    </class>
		
	<!--  Get a count of folders in the system -->
	<query name="personCount">
	    select count(*) from PersonNameAuthority
	</query>
	
	<!-- named query for getting the identifier types that can be applied to an item -->
	<query name="getPossibleNameAuthorityIdentifierTypes">
        select identifierType 
        from PersonNameAuthorityIdentifierType identifierType
        where identifierType not in
            ( select identifierType
              from PersonNameAuthority as name
              join name.identifiers as identifier
              join identifier.personNameAuthorityIdentifierType as identifierType
              where name.id = ?)
	</query>
	
	<!-- named query for getting all personNames ordered by surname forename familyName-->
    <query name="getAllPersonNameAuthorityAsc">select personNameAuthority from PersonNameAuthority as personNameAuthority 
		order by authoritativeName.lowerCaseSurname asc, authoritativeName.lowerCaseForename asc, 
       authoritativeName.lowerCaseFamilyName asc, authoritativeName.lowerCaseMiddleName asc </query>
       
    <!-- named query for getting all personNames ordered by surname forename familyName-->
    <query name="getAllPersonNameAuthorityDesc">select personNameAuthority from PersonNameAuthority as personNameAuthority 
		order by authoritativeName.lowerCaseSurname desc, authoritativeName.lowerCaseForename desc, 
       authoritativeName.lowerCaseFamilyName desc, authoritativeName.lowerCaseMiddleName desc </query>
	
	<!--  Get a count of folders in the system -->
	<query name="getAllAuthoritativeNameAsc">
	    from PersonNameAuthority order by authoritativeName.surname, authoritativeName.forename, 
	    authoritativeName.familyName
	</query>

	
</hibernate-mapping>